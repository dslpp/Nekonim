import React, { useState, useEffect } from 'react';
import './PersonalArea.css';
import { updateUserInfo, getUserInfo,updatePassword,updateEmail } from '../../http/userAPI';


const PersonalArea = () => {
  const [userInfo, setUserInfo] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [currentSection, setCurrentSection] = useState('personal');
  const [isEditingPersonal, setIsEditingPersonal] = useState(false);
  const [name, setName] = useState('');
  const [surname, setSurname] = useState('');
  const [sex, setSex] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [newEmail, setNewEmail] = useState('');
  const [passwordError, setPasswordError] = useState('');

  useEffect(() => {
    const fetchUserInfo = async () => {
      try {
        const userData = await getUserInfo();
        setUserInfo(userData);
        setName(userData.name);
        setSurname(userData.surname || '');
        setSex(userData.sex);
        setPhoneNumber(userData.phoneNumber || '');
        setEmail(userData.email);
        setIsLoading(false);
      } catch (error) {
        console.error('Error fetching user info:', error);
      }
    };

    fetchUserInfo();
  }, []);

  const handleSectionChange = (section) => {
    setCurrentSection(section);
  };

  const handleEditPersonalClick = () => {
    setIsEditingPersonal(true);
  };

  const handleSavePersonalClick = async () => {
    try {
      if (password && password !== confirmPassword) {
        setPasswordError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        return;
      }
      
      if (password) {
        await updatePassword(password, confirmPassword);
      }
      
      const updatedUserInfo = { name, surname, sex, phoneNumber };
      await updateUserInfo(updatedUserInfo);
      
      setUserInfo({ ...userInfo, ...updatedUserInfo });
      setIsEditingPersonal(false);
      setPasswordError('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
  };
  
  const handleSaveEmailClick = async () => {
    try {
      await updateEmail(newEmail);
      setEmail(newEmail);
      setNewEmail('');
      console.log('Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email:', error);
    }
  };
  
  const handleCancelPersonalClick = () => {
    setIsEditingPersonal(false);
    setName(userInfo.name);
    setSurname(userInfo.surname || '');
    setSex(userInfo.sex || '');
    setPhoneNumber(userInfo.phoneNumber || '');
    setPassword('');
    setConfirmPassword('');
    setPasswordError('');
  };

  

  return (
    <div className="personal-area">
      <div className="menu">
        <button id='personal' onClick={() => handleSectionChange('personal')}>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</button>
        <button onClick={() => handleSectionChange('orders')}>–ó–∞–∫–∞–∑—ã</button>
      </div>
      
      <div className="cardAc">
        {isLoading ? (
          <p>Loading...</p>
        ) : (
          <>
            {currentSection === 'personal' && (
              <div style={{ display: 'flex' }}>
                <div style={{ flex: 1 }}>
                  <h2>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                  {!isEditingPersonal ? (
                    <div className="info-container">
                      <div className="info-item">
                        <div className="info-row">
                          <span className="info-label-name">–ò–º—è:</span> {name}
                          <span className="info-label-sname">–§–∞–º–∏–ª–∏—è:</span> {surname}
                        </div>
                      </div>
                      <div className="info-item">
                        <span className="info-label">–ü–æ–ª:</span> {sex}
                      </div>
                      <div className="info-item">
                        <span className="info-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span> {phoneNumber}
                      </div>
                      <div className="info-item">
                        <span className="info-label">–ü–æ—á—Ç–∞:</span> {email}
                      </div>
                      
                      <button id='change' onClick={handleEditPersonalClick}>–ò–∑–º–µ–Ω–∏—Ç—å</button>
                    </div>
                    
                    
                  ) : (
                    <div>
                      <div className="info-container">
                        <div className="info-row">
                          <div className="form-group">
                            <label htmlFor="firstName">–ò–º—è:</label>
                            <input
                              type="text"
                              id="firstName"
                              value={name}
                              onChange={(e) => setName(e.target.value)}
                            />
                          </div>
                          <div className="form-group">
                            <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è:</label>
                            <input
                              type="text"
                              id="lastName"
                              value={surname}
                              onChange={(e) => setSurname(e.target.value)}
                            />
                          </div>
                          <div className="form-group">
                            <label htmlFor="gender">–ü–æ–ª:</label>
                            <select id="gender" value={sex} onChange={(e) => setSex(e.target.value)}>
                              <option value="–ú—É–∂—á–∏–Ω–∞">–ú</option>
                              <option value="–ñ–µ–Ω—â–∏–Ω–∞">–ñ</option>
                            </select>
                          </div>
                        </div>
                        <div className="info-row">
                          <div className="form-group">
                            <label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                            <input
                              type="text"
                              id="phone"
                              value={phoneNumber}
                              onChange={(e) => setPhoneNumber(e.target.value)}
                            />
                          </div>
                          <div className="form-group">
                            <label htmlFor="email">–ü–æ—á—Ç–∞:</label>
                            <input
                              type="email"
                              id="email"
                              value={newEmail}
                              onChange={(e) => setNewEmail(e.target.value)}
                            />
                            <br></br>
                            <button onClick={handleSaveEmailClick}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—á—Ç—É</button>
                          </div>
                        </div>
                        <div className="info-row">
                          <div className="form-group">
                            <label htmlFor="password">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</label>
                            <input
                              type="password"
                              id="password"
                              value={password}
                              onChange={(e) => setPassword(e.target.value)}
                            />
                          </div>
                          <div className="form-group">
                            <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</label>
                            <input
                              type="password"
                              id="confirmPassword"
                              value={confirmPassword}
                              onChange={(e) => setConfirmPassword(e.target.value)}
                            />
                          </div>
                        </div>
                        <p style={{marginTop:"-1.8vw"}}>
                          –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å, —Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –ø—É—Å—Ç—ã–º–∏
                        </p>
                        {passwordError && <p style={{ color: 'red',marginTop:"-2vw" }}>{passwordError}</p>}
                        <div className="info-row">
                          <button id='changec' onClick={handleCancelPersonalClick}>–û—Ç–º–µ–Ω–∞</button>
                          <button id='changes' onClick={handleSavePersonalClick}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                
              </div>
            )}

            {currentSection === 'orders' && (
              <div>
                <h2>–ó–∞–∫–∞–∑—ã</h2>
                <p>Coming Soon üòÅ</p>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
}

export default PersonalArea;
